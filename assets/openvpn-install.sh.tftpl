#!/bin/bash
#

# Detect Debian users running the script with "sh" instead of bash
if readlink /proc/$$/exe | grep -q "dash"; then
	echo "This script needs to be run with bash, not sh"
	exit
fi

if [[ "$EUID" -ne 0 ]]; then
	echo "Sorry, you need to run this as root"
	exit
fi

# Detect OS
# $os_version variables aren't always in use, but are kept here for convenience
if grep -qs "ubuntu" /etc/os-release; then
	os="ubuntu"
	os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')
	group_name="nogroup"
elif [[ -e /etc/debian_version ]]; then
	os="debian"
	os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)
	group_name="nogroup"
elif [[ -e /etc/centos-release ]]; then
	os="centos"
	os_version=$(grep -oE '[0-9]+' /etc/centos-release | head -1)
	group_name="nobody"
elif [[ -e /etc/fedora-release ]]; then
	os="fedora"
	os_version=$(grep -oE '[0-9]+' /etc/fedora-release | head -1)
	group_name="nobody"
else
	echo "Looks like you aren't running this installer on Ubuntu, Debian, CentOS or Fedora"
	exit
fi

if [[ "$os" == "ubuntu" && "$os_version" -lt 1804 ]]; then
	echo "Ubuntu 18.04 or higher is required to use this installer
This version of Ubuntu is too old and unsupported"
	exit
fi

if [[ "$os" == "debian" && "$os_version" -lt 9 ]]; then
	echo "Debian 9 or higher is required to use this installer
This version of Debian is too old and unsupported"
	exit
fi

if [[ "$os" == "centos" && "$os_version" -lt 7 ]]; then
	echo "CentOS 7 or higher is required to use this installer
This version of CentOS is too old and unsupported"
	exit
fi

if [[ ! -e /dev/net/tun ]]; then
	echo "The TUN device is not available
You need to enable TUN before running this script"
	exit
fi

function welcome_message() {
    clear
	echo 'Welcome to this OpenVPN road warrior installer!'
	echo
	echo "I need to ask you a few questions before starting setup."
	echo "You can use the default options and just press enter if you are ok with them."
}

function get_main_interface_ip() {
    # If system has a single IPv4, it is selected automatically. Else, ask the user
	if [[ $(ip -4 addr | grep inet | grep -vEc '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}') -eq 1 ]]; then
		ip=$(ip -4 addr | grep inet | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
	else
		number_of_ip=$(ip -4 addr | grep inet | grep -vEc '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
		ip_number="1"
		ip=$(ip -4 addr | grep inet | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sed -n "$ip_number"p)
	fi
    echo $ip
}

function get_public_ip() {
    IMDSV2_TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -s -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
    get_public_ip=$(grep -m 1 -oE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' <<< "$(curl -s -H "X-aws-ec2-metadata-token: $IMDSV2_TOKEN" "http://169.254.169.254/latest/meta-data/public-ipv4")")
    [[ -z "$public_ip" ]] && public_ip="$get_public_ip"

    echo $public_ip
}

function install_firewall() {
    if [[ "$os" == "centos" || "$os" == "fedora" ]]; then
        firewall="firewalld"
        # We don't want to silently enable firewalld, so we give a subtle warning
        # If the user continues, firewalld will be installed and enabled during setup
        echo
        echo "firewalld, which is required to manage routing tables, will also be installed."
    elif [[ "$os" == "debian" || "$os" == "ubuntu" ]]; then
        # iptables is way less invasive than firewalld so no warning is given
        firewall="iptables"
    fi
}

function easy_rsa_setup() {
    # Get easy-rsa
	easy_rsa_url='https://github.com/OpenVPN/easy-rsa/releases/download/v3.2.0/EasyRSA-3.2.0.tgz'
	wget -O ~/easyrsa.tgz "$easy_rsa_url" 2>/dev/null || curl -Lo ~/easyrsa.tgz "$easy_rsa_url"
	tar xzf ~/easyrsa.tgz -C ~/
	mv ~/EasyRSA-3.2.0/ /etc/openvpn/server/
	mv /etc/openvpn/server/EasyRSA-3.2.0/ /etc/openvpn/server/easy-rsa/
	chown -R root:root /etc/openvpn/server/easy-rsa/
	rm -f ~/easyrsa.tgz
	cd /etc/openvpn/server/easy-rsa/
	# Create the PKI, set up the CA and the server and client certificates
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	EASYRSA_CERT_EXPIRE=3650 ./easyrsa --batch build-server-full server nopass
	EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/issued/server.crt pki/private/server.key pki/crl.pem /etc/openvpn/server
}

function generate_server_conf() {
    # Generate server.conf
	echo "local $ip
port $port
proto $protocol
dev tun
ca /data/bucket/cav2/ca.pem
cert /data/bucket/cav2/server-cert.pem
key /data/bucket/cav2/server-key.pem
dh /data/bucket/cav2/dh.pem
auth SHA512
tls-crypt /data/bucket/cav2/tls_crypt.pem
duplicate-cn
topology subnet
server ${vpn_subnet_address} ${vpn_subnet_mask}" > /etc/openvpn/server/server.conf

    # IPv6
	if [[ -z "$ip6" ]]; then
		echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server/server.conf
	else
		echo 'server-ipv6 fddd:1194:1194:1194::/64' >> /etc/openvpn/server/server.conf
		echo 'push "redirect-gateway def1 ipv6 bypass-dhcp"' >> /etc/openvpn/server/server.conf
	fi
	echo 'ifconfig-pool-persist ipp.txt' >> /etc/openvpn/server/server.conf

    # setup dns resolver
    if grep -q "127.0.0.53" "/etc/resolv.conf"; then
        resolv_conf="/run/systemd/resolve/resolv.conf"
    else
        resolv_conf="/etc/resolv.conf"
    fi
    # Obtain the resolvers from resolv.conf and use them for OpenVPN
    grep -v '#' "$resolv_conf" | grep nameserver | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
        echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server/server.conf
    done

    echo "keepalive 10 120
cipher AES-256-CBC
user nobody
group $group_name
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify /data/bucket/cav2/crl.pem" >> /etc/openvpn/server/server.conf

    if [[ "$protocol" = "udp" ]]; then
		echo "explicit-exit-notify" >> /etc/openvpn/server/server.conf
	fi
}

function setup_mount_s3() {
    apt install -y wget
    wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
    apt install -y ./mount-s3.deb

    mkdir -p /data/bucket /data/cache
    S3_BUCKET=${vpn_data_s3_bucket}
    mount-s3 --read-only --allow-other --cache /data/cache $S3_BUCKET /data/bucket
}

if [[ ! -e /etc/openvpn/server/server.conf ]]; then
    welcome_message
    
    ip=$(get_main_interface_ip)
    echo "using ip address $ip"

    # if ip address is private, then we get public ip
    if echo "$ip" | grep -qE '^(10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.|192\.168)'; then
        public_ip=$(get_public_ip)
		echo "using public ip $public_ip"
    fi

    protocol="udp"
	echo "using protocol $protocol"
	port="${vpn_port}"
	echo "using port $port"
	echo "using system dns resolver"
    
    client="client"

    # Install a firewall in the rare case where one is not already available
	if ! systemctl is-active --quiet firewalld.service && ! hash iptables 2>/dev/null; then
		install_firewall
	fi

    # If running inside a container, disable LimitNPROC to prevent conflicts
    if systemd-detect-virt -cq; then
		mkdir /etc/systemd/system/openvpn-server@server.service.d/ 2>/dev/null
		echo "[Service]
LimitNPROC=infinity" > /etc/systemd/system/openvpn-server@server.service.d/disable-limitnproc.conf
	fi

    if [[ "$os" = "debian" || "$os" = "ubuntu" ]]; then
		apt-get update
		apt-get install -y openvpn openssl ca-certificates $firewall
	elif [[ "$os" = "centos" ]]; then
		yum install -y epel-release
		yum install -y openvpn openssl ca-certificates tar $firewall
	else
		# Else, OS must be Fedora
		dnf install -y openvpn openssl ca-certificates tar $firewall
	fi

    # If firewalld was just installed, enable it
	if [[ "$firewall" == "firewalld" ]]; then
		systemctl enable --now firewalld.service
	fi

    # easy_rsa_setup
    setup_mount_s3
    # CRL is read with each client connection, when OpenVPN is dropped to nobody
	# chown nobody:"$group_name" /etc/openvpn/server/crl.pem
	# Generate key for tls-crypt
	# openvpn --genkey --secret /etc/openvpn/server/tc.key

    # Create the DH parameters file using the predefined ffdhe2048 group
	echo '-----BEGIN DH PARAMETERS-----
MIICDAKCAgEA744CEGGQBwXZm1NDmEC3gmhtpunkCxt8OABxcsVx2JVQlH5BJT/n
a0mUoLG6j40nOaI4wfZEWEc6E1WZj03r1yeGH+3OMLPYyOFlu5Pj+rQwuN0+m4zB
g0Bdx7Egqxs5DrQAagLq0l6ByyVTPhHIzz43VT0iRhua/3nSmlaHBACjMWYj6Iuc
6WYMG71VPNY7SijAmqay/wPh1twPRrD7/iuC8AAkdtXll+IUMtFPKeqpIkz9ELYE
Vt1GFuumDoPb7BjTOS31GBAq1Hkq0JPJPlcBejCJwUhxnjNU3gaBHlr4OaFcmw9+
MAB3jP47alxMyUc/LtP1Wl7hM0DPVLQUvPwZi+mk2BDfsUSUTh697Umk4658KThU
Tx4g1oLcDKimKr4o29oUTN0ENC71IJUdpG3zpYU+cTMl+F2SnM93q5o8f+cfM2MQ
GVlPJNMrerj6aqXMjb+vGeU1p+e2SoGyk16dd2fx0hH/QpP4qm16sd/BZD0SpAEn
lY2BCC18dE/LwjiGvhcql2coQL9vaiRRKwpoWym5sabllHRPGbt20yu2SXYeDf0o
BRUQhjcH5lw52cM2zxLcMsdxInMYRGH4JNp0YhNcdNgN5ooBnQ0DzJSpmscOMgEa
1yOOT200ThZvVuSUVgWNs9s5F7G7i6+E2rwsqrdpbbhF+al7B0eHKYcCAQICAgFF
-----END DH PARAMETERS-----' > /etc/openvpn/server/dh.pem

    generate_server_conf

    # Enable net.ipv4.ip_forward for the system
	echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/30-openvpn-forward.conf
	# Enable without waiting for a reboot or service restart
	echo 1 > /proc/sys/net/ipv4/ip_forward
	
    if [[ -n "$ip6" ]]; then
		# Enable net.ipv6.conf.all.forwarding for the system
		echo "net.ipv6.conf.all.forwarding=1" >> /etc/sysctl.d/30-openvpn-forward.conf
		# Enable without waiting for a reboot or service restart
		echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
	fi
	
    if systemctl is-active --quiet firewalld.service; then
		# Using both permanent and not permanent rules to avoid a firewalld
		# reload.
		# We don't use --add-service=openvpn because that would only work with
		# the default port and protocol.
		firewall-cmd --add-port="$port"/"$protocol"
		firewall-cmd --zone=trusted --add-source=${vpn_subnet_address}${vpn_subnet_cidr}
		firewall-cmd --permanent --add-port="$port"/"$protocol"
		firewall-cmd --permanent --zone=trusted --add-source=${vpn_subnet_address}${vpn_subnet_cidr}
		# Set NAT for the VPN subnet
		firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -s ${vpn_subnet_address}${vpn_subnet_cidr} ! -d ${vpn_subnet_address}${vpn_subnet_cidr} -j SNAT --to "$ip"
		firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s ${vpn_subnet_address}${vpn_subnet_cidr} ! -d ${vpn_subnet_address}${vpn_subnet_cidr} -j SNAT --to "$ip"
		if [[ -n "$ip6" ]]; then
			firewall-cmd --zone=trusted --add-source=fddd:1194:1194:1194::/64
			firewall-cmd --permanent --zone=trusted --add-source=fddd:1194:1194:1194::/64
			firewall-cmd --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to "$ip6"
			firewall-cmd --permanent --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to "$ip6"
		fi
	else
		# Create a service to set up persistent iptables rules
		iptables_path=$(command -v iptables)
		ip6tables_path=$(command -v ip6tables)
		echo "[Unit]
Before=network.target
[Service]
Type=oneshot
ExecStart=$iptables_path -t nat -A POSTROUTING -s ${vpn_subnet_address}${vpn_subnet_cidr} ! -d ${vpn_subnet_address}${vpn_subnet_cidr} -j SNAT --to $ip
ExecStart=$iptables_path -I INPUT -p $protocol --dport $port -j ACCEPT
ExecStart=$iptables_path -I FORWARD -s ${vpn_subnet_address}${vpn_subnet_cidr} -j ACCEPT
ExecStart=$iptables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
ExecStop=$iptables_path -t nat -D POSTROUTING -s ${vpn_subnet_address}${vpn_subnet_cidr} ! -d ${vpn_subnet_address}${vpn_subnet_cidr} -j SNAT --to $ip
ExecStop=$iptables_path -D INPUT -p $protocol --dport $port -j ACCEPT
ExecStop=$iptables_path -D FORWARD -s ${vpn_subnet_address}${vpn_subnet_cidr} -j ACCEPT
ExecStop=$iptables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" > /etc/systemd/system/openvpn-iptables.service
		if [[ -n "$ip6" ]]; then
			echo "ExecStart=/sbin/ip6tables -t nat -A POSTROUTING -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to $ip6
ExecStart=$ip6tables_path -I FORWARD -s fddd:1194:1194:1194::/64 -j ACCEPT
ExecStart=$ip6tables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
ExecStop=$ip6tables_path -t nat -D POSTROUTING -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to $ip6
ExecStop=$ip6tables_path -D FORWARD -s fddd:1194:1194:1194::/64 -j ACCEPT
ExecStop=$ip6tables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" >> /etc/systemd/system/openvpn-iptables.service
		fi
		echo "RemainAfterExit=yes
[Install]
WantedBy=multi-user.target" >> /etc/systemd/system/openvpn-iptables.service
		systemctl enable --now openvpn-iptables.service
	fi
	
    # If SELinux is enabled and a custom port was selected, we need this
	if sestatus 2>/dev/null | grep "Current mode" | grep -q "enforcing" && [[ "$port" != 1194 ]]; then
		# Install semanage if not already present
		if ! hash semanage 2>/dev/null; then
			if [[ "$os_version" -eq 7 ]]; then
				# Centos 7
				yum install -y policycoreutils-python
			else
				# CentOS 8 or Fedora
				dnf install -y policycoreutils-python-utils
			fi
		fi
		semanage port -a -t openvpn_port_t -p "$protocol" "$port"
	fi
	# If the server is behind NAT, use the correct IP address
	[[ ! -z "$public_ip" ]] && ip="$public_ip"
	
    # client-common.txt is created so we have a template to add further users later
	echo "client
dev tun
proto $protocol
remote $ip $port
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-CBC
ignore-unknown-option block-outside-dns
block-outside-dns
verb 3" > /etc/openvpn/server/client-common.txt
	# Enable and start the OpenVPN service
	systemctl enable --now openvpn-server@server.service
	# Generates the custom client.ovpn
	new_client
	echo
	echo "Finished!"
	echo
fi